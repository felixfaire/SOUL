/*
    == SOUL example code ==
    == Designed by Ivan COHEN ==

    This is an algorithm simulating a Diode Clipper, which is an analog low-pass
    filter with a resistance, a capacitance, and two parallel diodes put in
    opposite directions. The linear part is simulated using the TPT structure,
    and the nonlinear part uses the Newton-Raphson's method to solve the roots
    of the implicit equation.
*/

//==============================================================================
graph diode
{
    input  stream float audioIn;    // just using mono in and out
    output stream float audioOut;

    input event float cutoffFrequency   [[ min: 20, max: 20000, init: 10000, step: 10 ]];
    input event float gaindB            [[ min: 0, max: 40, init: 20, step: 0.1 ]];

    let diodeClipper = DiodeClipper * 4; // oversampling 4 times

    connection
    {
        audioIn -> diodeClipper.audioIn;

        cutoffFrequency -> diodeClipper.cutoffFrequencyIn;
        gaindB -> diodeClipper.gaindBIn;

        diodeClipper.audioOut -> audioOut;
    }
}

processor DiodeClipper
{
    input stream float audioIn;
    output stream float audioOut;

    input event float cutoffFrequencyIn;
    input event float gaindBIn;

    event cutoffFrequencyIn (float f)   { cutoffFrequency = f; }
    event gaindBIn (float f)            { gaindB = f; }

    // Diode Clipper parameters
    float cutoffFrequency = 10000.f;
    float gaindB = 40.f;

    // Update the filter settings every UPDATE_INTERVAL samples
    let updateInterval = 8;
    let maxIterations = 64;

    // internal variables
    float G, gain;

    /** Updates the internal variables */
    void updateProcessing()
    {
        // low-pass filter internal variables update
        let cutoff = clamp (cutoffFrequency, 10.f, float32 (processor.frequency) * 0.49999f);
        let g = tan (float (pi) * cutoff / float32 (processor.frequency));
        G = g / (1 + g);

        // gain update
        gain = soul::dBtoGain (gaindB);
    }

    /** Main processing function */
    void run()
    {
        // internal constants (1N4148)
        let numIterations = 64;
        let Is = 2.52e-9;
        let mu = 1.752;
        let Vt = 26e-3;
        let R = 2.2e3;
        let tolerance = 1e-12;

        // DAFX15 Capped Step
        let deltaLim = mu * Vt * acosh (mu * Vt / 2.0 / (R * Is * G));

        // state variables
        float32 s1 = 0.f;
        float64 out = 0.0;

        loop
        {
            updateProcessing();

            loop (updateInterval)
            {
                let in = audioIn * gain;
                let p = G * (in - s1) + s1;
                float64 delta = 1e9;

                // Newton-Raphson iterations
                loop (maxIterations)
                {
                    if (abs (delta) <= tolerance)
                        break;

                    let J = p - (2 * G * R * Is) * sinh (out / (mu * Vt)) - out;
                    let dJ = -1 - G * 2 * R * Is / (mu * Vt) * cosh (out / (mu * Vt));

                    // DAFX15 Capped Step
                    delta = clamp (-J / dJ, -deltaLim, deltaLim);

                    // next iteration
                    out += delta;
                }

                // TPT structure updates
                let v = float (out) - s1;
                s1 = float (out) + v;

                // output
                audioOut << float (out);

                advance();
            }
        }
    }
}
